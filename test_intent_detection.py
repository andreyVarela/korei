"""
Test script para verificar el sistema de detecci√≥n de intenci√≥n inteligente
Verifica que saludos como "hola" no se procesen como tareas
"""
import asyncio
import sys
import os
from unittest.mock import AsyncMock, MagicMock

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from handlers.message_handler import message_handler

async def test_intent_detection():
    """Test del sistema de detecci√≥n de intenci√≥n"""
    print("üéØ TEST: Sistema de Detecci√≥n de Intenci√≥n Inteligente")
    print("=" * 60)
    
    # Usuario de prueba
    user_context = {
        "id": "test-user-123",
        "whatsapp_number": "50612345678",
        "name": "Usuario Test"
    }
    
    # Casos de prueba - mensajes que NO deben procesarse como tareas
    test_cases = [
        # 1. SALUDOS SIMPLES
        {
            "input": "hola",
            "expected_type": "greeting",
            "description": "Saludo simple que report√≥ el usuario"
        },
        {
            "input": "Hola",
            "expected_type": "greeting", 
            "description": "Saludo con may√∫scula"
        },
        {
            "input": "hello",
            "expected_type": "greeting",
            "description": "Saludo en ingl√©s"
        },
        {
            "input": "buenas tardes",
            "expected_type": "greeting",
            "description": "Saludo m√°s largo"
        },
        
        # 2. COMANDOS SIN SLASH
        {
            "input": "help",
            "expected_type": "command",
            "description": "Comando sin slash"
        },
        {
            "input": "hoy",
            "expected_type": "command", 
            "description": "Comando hoy sin slash"
        },
        {
            "input": "stats",
            "expected_type": "command",
            "description": "Comando estad√≠sticas"
        },
        
        # 3. AGRADECIMIENTOS
        {
            "input": "gracias",
            "expected_type": "thanks",
            "description": "Agradecimiento simple"
        },
        {
            "input": "muchas gracias",
            "expected_type": "thanks",
            "description": "Agradecimiento completo"
        },
        
        # 4. MENSAJES AMBIGUOS
        {
            "input": "ok",
            "expected_type": "ambiguous",
            "description": "Respuesta muy corta"
        },
        {
            "input": "si",
            "expected_type": "ambiguous",
            "description": "Confirmaci√≥n simple"
        },
        
        # 5. EMOJIS SOLOS
        {
            "input": "üòä",
            "expected_type": "emoji_only",
            "description": "Solo emoji"
        },
        {
            "input": "üëç",
            "expected_type": "emoji_only", 
            "description": "Pulgar arriba"
        },
        
        # 6. CONTENIDO REAL (debe procesarse con Gemini)
        {
            "input": "necesito comprar leche ma√±ana a las 3pm",
            "expected_type": "real_content",
            "description": "Tarea real que s√≠ debe procesarse"
        },
        {
            "input": "tengo reuni√≥n con cliente el viernes",
            "expected_type": "real_content",
            "description": "Evento real que s√≠ debe procesarse"
        }
    ]
    
    print(f"üë§ Usuario: {user_context['name']}")
    print(f"üì± N√∫mero: {user_context['whatsapp_number']}")
    print()
    
    # Mock de WhatsApp Cloud Service para evitar enviar mensajes reales
    original_send = message_handler.whatsapp_cloud_service.send_text_message if hasattr(message_handler, 'whatsapp_cloud_service') else None
    
    # Crear mock temporal
    mock_responses = []
    async def mock_send_message(to, message):
        mock_responses.append({"to": to, "message": message})
        print(f"    üì§ Mock env√≠o: {message}")
        return {"success": True}
    
    # Aplicar mock si existe el servicio
    try:
        from services.whatsapp_cloud import whatsapp_cloud_service
        whatsapp_cloud_service.send_text_message = mock_send_message
    except:
        print("‚ö†Ô∏è WhatsApp Cloud Service no disponible, continuando con test...")
    
    # Ejecutar tests
    passed = 0
    failed = 0
    
    print("üß™ EJECUTANDO TESTS:")
    print("-" * 40)
    
    for i, test_case in enumerate(test_cases, 1):
        input_msg = test_case["input"]
        expected_type = test_case["expected_type"]
        description = test_case["description"]
        
        print(f"\n{i:2d}. {description}")
        print(f"    üí¨ Input: '{input_msg}'")
        
        try:
            # Ejecutar detecci√≥n de intenci√≥n
            result = await message_handler.detect_user_intent(input_msg, user_context)
            
            detected_type = result.get('type', 'unknown')
            should_handle = result.get('should_handle_directly', False)
            
            print(f"    üéØ Detected: {detected_type}")
            print(f"    ‚ö° Handle directly: {should_handle}")
            
            # Verificar resultado
            if expected_type == "real_content":
                # Para contenido real, should_handle_directly debe ser False
                if not should_handle and detected_type == expected_type:
                    print(f"    ‚úÖ PASS - Contenido real enviado a Gemini")
                    passed += 1
                else:
                    print(f"    ‚ùå FAIL - Contenido real no detectado correctamente")
                    failed += 1
            elif expected_type == "command":
                # Para comandos, depende de si se redirige correctamente
                if detected_type in ["command", "greeting", "handled"] or should_handle:
                    print(f"    ‚úÖ PASS - Comando manejado directamente")
                    passed += 1
                else:
                    print(f"    ‚ùå FAIL - Comando no detectado correctamente")
                    failed += 1
            else:
                # Para otros casos, should_handle_directly debe ser True
                if should_handle and detected_type == expected_type:
                    print(f"    ‚úÖ PASS - {expected_type} manejado directamente")
                    passed += 1
                else:
                    print(f"    ‚ùå FAIL - Expected {expected_type}, got {detected_type} (handle: {should_handle})")
                    failed += 1
                    
        except Exception as e:
            print(f"    üí• ERROR: {e}")
            failed += 1
    
    # Resumen de resultados
    print("\n" + "=" * 60)
    print("üìä RESULTADOS DEL TEST:")
    print(f"‚úÖ Casos exitosos: {passed}")
    print(f"‚ùå Casos fallidos: {failed}")
    print(f"üìà Tasa de √©xito: {(passed/(passed+failed)*100):.1f}%")
    
    if mock_responses:
        print(f"\nüì± Mensajes enviados en mock: {len(mock_responses)}")
    
    # Casos cr√≠ticos espec√≠ficos
    print("\nüéØ VERIFICACI√ìN ESPEC√çFICA DEL PROBLEMA REPORTADO:")
    print("-" * 50)
    
    # Test del caso exacto que report√≥ el usuario: "hola"
    try:
        hola_result = await message_handler.detect_user_intent("hola", user_context)
        if hola_result.get('should_handle_directly', False):
            print("‚úÖ CR√çTICO: 'hola' se maneja como saludo (NO como tarea)")
        else:
            print("‚ùå CR√çTICO: 'hola' todav√≠a se enviar√≠a a Gemini como tarea")
    except Exception as e:
        print(f"‚ùå CR√çTICO: Error procesando 'hola': {e}")
    
    print("\nüéØ SISTEMA DE FILTROS INTELIGENTES:")
    print("‚úÖ Saludos ‚Üí Respuesta directa personalizada")
    print("‚úÖ Comandos sin slash ‚Üí Redirecci√≥n a comando handler")
    print("‚úÖ Agradecimientos ‚Üí Respuesta cordial")
    print("‚úÖ Mensajes ambiguos ‚Üí Pedir clarificaci√≥n")
    print("‚úÖ Emojis solos ‚Üí Respuesta amigable")
    print("‚úÖ Contenido real ‚Üí Procesar con Gemini")
    
    if passed > failed:
        print(f"\nüéâ TEST EXITOSO - El sistema filtra correctamente los comandos y saludos")
        print(f"üéØ 'hola' y otros saludos ya NO se procesan como tareas")
    else:
        print(f"\n‚ö†Ô∏è TEST CON ISSUES - Revisar implementaci√≥n del filtro")

if __name__ == "__main__":
    print("INICIANDO TEST DE DETECCION DE INTENCION")
    print("Este test verifica que:")
    print("1. 'hola' se detecte como saludo, no como tarea")
    print("2. Comandos sin slash se redirijan correctamente")
    print("3. Agradecimientos y emojis se manejen directamente")
    print("4. Solo el contenido real se envie a Gemini")
    print()
    
    # Ejecutar test
    asyncio.run(test_intent_detection())
    
    print("\nTest completado.")
    print("El problema reportado 'si agrego hola, lo agrega como tarea' debe estar resuelto.")