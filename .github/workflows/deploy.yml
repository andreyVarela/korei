name: Build and Deploy to Production

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: andreyvarela/korei

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Docker image manually
      run: |
        echo "🔨 Building Docker image with manual commands for better error visibility..."
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Image name: ${{ env.IMAGE_NAME }}"
        echo "Commit SHA: ${{ github.sha }}"
        
        # Build the image
        docker build \
          --no-cache \
          --target production \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          .
        
        echo "✅ Docker build completed successfully"
        
    - name: Push Docker image to registry
      run: |
        echo "📤 Pushing Docker image to GitHub Container Registry..."
        
        # Push both tags
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        echo "✅ Docker push completed successfully"
        
    - name: Verify image was pushed successfully
      run: |
        echo "🔍 Verifying image exists in registry..."
        echo "Attempting to pull main-SHA tag..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
        echo "✅ Image verification successful - ready for deployment"
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: 138.197.41.6
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /opt/korei
          
          # Backup current version
          if [ -d "korei-app" ]; then
            mv korei-app korei-app-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Clone new version for docker-compose files
          curl -L https://github.com/${{ github.repository }}/archive/main.tar.gz | tar xz
          mv korei-main korei-app
          cd korei-app
          
          # Create .env from secrets (with debug info)
          echo "🔍 DEBUG: Creating .env file with secrets..."
          cat > .env << EOF
          APP_NAME=Korei Assistant
          APP_VERSION=2.0.0
          ENVIRONMENT=production
          DEBUG=false
          PORT=8000
          
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY || secrets.SUPABASE_KEY || 'missing-supabase-service-key' }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY || secrets.SUPABASE_KEY || 'missing-supabase-anon-key' }}
          
          WHATSAPP_ACCESS_TOKEN=${{ secrets.WHATSAPP_CLOUD_TOKEN }}
          WHATSAPP_PHONE_NUMBER_ID=${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
          WHATSAPP_BUSINESS_ACCOUNT_ID=${{ secrets.WHATSAPP_BUSINESS_ACCOUNT_ID }}
          WHATSAPP_VERIFY_TOKEN=${{ secrets.VERIFY_TOKEN }}
          
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALLOWED_ORIGINS=https://api.whatsapp.com,https://korei.duckdns.org
          TIMEZONE=America/Costa_Rica
          LOG_LEVEL=INFO
          
          # Docker image info
          KOREI_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          EOF
          
          # Debug: Verify .env file was created correctly (without exposing secrets)
          echo "🔍 DEBUG: .env file variables (sanitized):"
          grep -E "^[A-Z_]+=.*" .env | sed 's/=.*/=***/' || echo "No variables found in .env"
          
          # Verify critical variables exist (without showing values)
          echo "🔍 DEBUG: Checking critical variables..."
          grep -q "WHATSAPP_ACCESS_TOKEN=" .env && echo "✅ WHATSAPP_ACCESS_TOKEN found" || echo "❌ WHATSAPP_ACCESS_TOKEN missing"
          grep -q "SUPABASE_SERVICE_KEY=" .env && echo "✅ SUPABASE_SERVICE_KEY found" || echo "❌ SUPABASE_SERVICE_KEY missing"
          grep -q "GEMINI_API_KEY=" .env && echo "✅ GEMINI_API_KEY found" || echo "❌ GEMINI_API_KEY missing"
          
          # Login to registry and pull latest image
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Stop and remove current containers completely
          echo "🧹 Cleaning up existing containers..."
          docker compose down --remove-orphans || true
          docker rm -f korei-assistant korei-nginx || true
          docker system prune -f || true
          
          # Pull the exact image built in this workflow
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          
          # Update docker-compose to use the specific image
          export KOREI_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          
          # Verify image exists before deploying
          docker images | grep andreyvarela/korei || echo "Warning: Expected image not found"
          
          # Deploy with the new image
          docker compose up -d --force-recreate
          
          # Verify correct image is running
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" | grep korei
          
          # Cleanup old images (keep last 3)
          docker image prune -f
          
          # Verify deployment
          sleep 15
          echo "🔍 Checking containers status..."
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          
          # Check both direct app and nginx proxy
          echo "🔍 Testing app direct access..."
          if curl -f http://localhost:8000/health; then
            echo "✅ App direct access works"
            APP_WORKS=true
          else
            echo "❌ App direct access failed"
            APP_WORKS=false
          fi
          
          echo "🔍 Testing nginx proxy access..."  
          if curl -f http://localhost/health; then
            echo "✅ Nginx proxy works"
            NGINX_WORKS=true
          else
            echo "❌ Nginx proxy failed"
            NGINX_WORKS=false
          fi
          
          # Determine overall success
          if [ "$APP_WORKS" = true ] && [ "$NGINX_WORKS" = true ]; then
            echo "✅ Deploy completed successfully!"
            echo "🚀 Application is running at http://138.197.41.6"
          elif [ "$APP_WORKS" = true ]; then
            echo "⚠️ App works but nginx proxy failed - partial success"
            echo "🚀 Application accessible at http://138.197.41.6:8000"
            echo "⚠️ Nginx issue - check nginx container logs"
            docker logs korei-nginx --tail=20 || echo "No nginx logs available"
            exit 0
          else
            echo "❌ Complete health check failed!"
            echo "📋 App logs:"
            docker logs korei-assistant --tail=50
            echo "📋 Nginx logs:"  
            docker logs korei-nginx --tail=20 || echo "No nginx logs available"
            exit 1
          fi